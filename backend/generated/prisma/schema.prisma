generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Plano {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(50)
  descricao String?
  usuarios  Usuario[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Categoria {
  id        Int      @id @default(autoincrement())
  nome      String   @unique @db.VarChar(50)
  cursos    Curso[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Usuario {
  id                  Int                  @id @default(autoincrement())
  nome                String
  email               String               @unique
  senha               String
  tipo                TipoUsuario
  dataCadastro        DateTime             @default(now())
  planoId             Int
  plano               Plano                @relation(fields: [planoId], references: [id])
  progressoVideos     ProgressoVideo[]     @relation("UsuarioProgressoVideo")
  progressoApostilas  ProgressoApostila[]  @relation("UsuarioProgressoApostila")
  progressoAvaliacoes ProgressoAvaliacao[] @relation("UsuarioProgressoAvaliacao")
  turmasComoAluno     AlunoTurma[]
  turmasComoProfessor Turma[]              @relation("TurmaProfessor")
  parcerias           Parceria[]
}

enum TipoUsuario {
  ALUNO
  PROFESSOR
  ADMIN
}

model Curso {
  id           Int       @id @default(autoincrement())
  titulo       String
  descricao    String
  categoriaId  Int
  categoria    Categoria @relation(fields: [categoriaId], references: [id])
  cargaHoraria Int
  turmas       Turma[]
  modulos      Modulo[]
}

model Turma {
  id          Int          @id @default(autoincrement())
  nome        String
  cursoId     Int
  curso       Curso        @relation(fields: [cursoId], references: [id])
  professorId Int
  professor   Usuario      @relation(fields: [professorId], references: [id], name: "TurmaProfessor")
  alunos      AlunoTurma[]
}

model AlunoTurma {
  alunoId Int
  aluno   Usuario @relation(fields: [alunoId], references: [id])
  turmaId Int
  turma   Turma   @relation(fields: [turmaId], references: [id])

  @@id([alunoId, turmaId])
}

model Modulo {
  id         Int         @id @default(autoincrement())
  cursoId    Int
  titulo     String
  ordem      Int
  curso      Curso       @relation(fields: [cursoId], references: [id])
  videos     Video[]
  apostilas  Apostila[]
  avaliacoes Avaliacao[]
}

model Video {
  id        Int              @id @default(autoincrement())
  moduloId  Int
  titulo    String
  url       String
  duracao   Int
  modulo    Modulo           @relation(fields: [moduloId], references: [id])
  progresso ProgressoVideo[]
}

model Apostila {
  id        Int                 @id @default(autoincrement())
  moduloId  Int
  titulo    String
  arquivo   String
  modulo    Modulo              @relation(fields: [moduloId], references: [id])
  progresso ProgressoApostila[]
}

model Avaliacao {
  id        Int                  @id @default(autoincrement())
  moduloId  Int
  titulo    String
  descricao String
  modulo    Modulo               @relation(fields: [moduloId], references: [id])
  progresso ProgressoAvaliacao[]
}

model ProgressoVideo {
  id        Int     @id @default(autoincrement())
  alunoId   Int
  videoId   Int
  progresso Int
  concluido Boolean @default(false)
  aluno     Usuario @relation("UsuarioProgressoVideo", fields: [alunoId], references: [id])
  video     Video   @relation(fields: [videoId], references: [id])

  @@unique([alunoId, videoId])
}

model ProgressoApostila {
  id         Int      @id @default(autoincrement())
  alunoId    Int
  apostilaId Int
  progresso  Int
  concluido  Boolean  @default(false)
  aluno      Usuario  @relation("UsuarioProgressoApostila", fields: [alunoId], references: [id])
  apostila   Apostila @relation(fields: [apostilaId], references: [id])

  @@unique([alunoId, apostilaId])
}

model ProgressoAvaliacao {
  id          Int       @id @default(autoincrement())
  alunoId     Int
  avaliacaoId Int
  nota        Float
  concluido   Boolean   @default(false)
  aluno       Usuario   @relation("UsuarioProgressoAvaliacao", fields: [alunoId], references: [id])
  avaliacao   Avaliacao @relation(fields: [avaliacaoId], references: [id])

  @@unique([alunoId, avaliacaoId])
}

model Parceria {
  id          Int      @id @default(autoincrement())
  alunoId     Int
  descricao   String
  percentual  Float
  contratoUrl String
  ativo       Boolean  @default(true)
  aluno       Usuario  @relation(fields: [alunoId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
