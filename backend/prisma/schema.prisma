generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AlunoTurma {
  alunoId Int
  turmaId Int
  usuario usuario @relation(fields: [alunoId], references: [id], map: "AlunoTurma_alunoId_fkey")
  turma   turma   @relation(fields: [turmaId], references: [id], map: "AlunoTurma_turmaId_fkey")

  @@id([alunoId, turmaId])
  @@index([turmaId], map: "AlunoTurma_turmaId_fkey")
}

model apostila {
  id                Int                 @id @default(autoincrement())
  moduloId          Int
  titulo            String
  arquivo           String
  modulo            modulo              @relation(fields: [moduloId], references: [id], map: "Apostila_moduloId_fkey")
  progressoapostila ProgressoApostila[]

  @@index([moduloId], map: "Apostila_moduloId_fkey")
}

model avaliacao {
  id                 Int                  @id @default(autoincrement())
  moduloId           Int
  titulo             String
  descricao          String
  modulo             modulo               @relation(fields: [moduloId], references: [id], map: "Avaliacao_moduloId_fkey")
  progressoavaliacao ProgressoAvaliacao[]

  @@index([moduloId], map: "Avaliacao_moduloId_fkey")
}

model categoria {
  id        Int      @id @default(autoincrement())
  nome      String   @unique(map: "Categoria_nome_key") @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  curso     curso[]
}

model curso {
  id           Int       @id @default(autoincrement())
  titulo       String
  descricao    String
  categoriaId  Int
  cargaHoraria Int
  categoria    categoria @relation(fields: [categoriaId], references: [id], map: "Curso_categoriaId_fkey")
  modulo       modulo[]
  turma        turma[]

  @@index([categoriaId], map: "Curso_categoriaId_fkey")
}

model modulo {
  id        Int         @id @default(autoincrement())
  cursoId   Int
  titulo    String
  ordem     Int
  apostila  apostila[]
  avaliacao avaliacao[]
  curso     curso       @relation(fields: [cursoId], references: [id], map: "Modulo_cursoId_fkey")
  video     video[]

  @@index([cursoId], map: "Modulo_cursoId_fkey")
}

model parceria {
  id          Int      @id @default(autoincrement())
  alunoId     Int
  descricao   String
  percentual  Float
  contratoUrl String
  ativo       Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  usuario     usuario  @relation(fields: [alunoId], references: [id], map: "Parceria_alunoId_fkey")

  @@index([alunoId], map: "Parceria_alunoId_fkey")
}

model plano {
  id        Int       @id @default(autoincrement())
  nome      String    @db.VarChar(50)
  descricao String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usuario   usuario[]
}

model ProgressoApostila {
  id         Int      @id @default(autoincrement())
  alunoId    Int
  apostilaId Int
  progresso  Int
  concluido  Boolean  @default(false)
  usuario    usuario  @relation(fields: [alunoId], references: [id], map: "ProgressoApostila_alunoId_fkey")
  apostila   apostila @relation(fields: [apostilaId], references: [id], map: "ProgressoApostila_apostilaId_fkey")

  @@unique([alunoId, apostilaId], map: "ProgressoApostila_alunoId_apostilaId_key")
  @@index([apostilaId], map: "ProgressoApostila_apostilaId_fkey")
}

model ProgressoAvaliacao {
  id          Int       @id @default(autoincrement())
  alunoId     Int
  avaliacaoId Int
  nota        Float
  concluido   Boolean   @default(false)
  usuario     usuario   @relation(fields: [alunoId], references: [id], map: "ProgressoAvaliacao_alunoId_fkey")
  avaliacao   avaliacao @relation(fields: [avaliacaoId], references: [id], map: "ProgressoAvaliacao_avaliacaoId_fkey")

  @@unique([alunoId, avaliacaoId], map: "ProgressoAvaliacao_alunoId_avaliacaoId_key")
  @@index([avaliacaoId], map: "ProgressoAvaliacao_avaliacaoId_fkey")
}

model ProgressoVideo {
  id        Int     @id @default(autoincrement())
  alunoId   Int
  videoId   Int
  progresso Int
  concluido Boolean @default(false)
  usuario   usuario @relation(fields: [alunoId], references: [id], map: "ProgressoVideo_alunoId_fkey")
  video     video   @relation(fields: [videoId], references: [id], map: "ProgressoVideo_videoId_fkey")

  @@unique([alunoId, videoId], map: "ProgressoVideo_alunoId_videoId_key")
  @@index([videoId], map: "ProgressoVideo_videoId_fkey")
}

model turma {
  id          Int          @id @default(autoincrement())
  nome        String
  cursoId     Int
  professorId Int
  alunoturma  AlunoTurma[]
  curso       curso        @relation(fields: [cursoId], references: [id], map: "Turma_cursoId_fkey")
  usuario     usuario      @relation(fields: [professorId], references: [id], map: "Turma_professorId_fkey")

  @@index([cursoId], map: "Turma_cursoId_fkey")
  @@index([professorId], map: "Turma_professorId_fkey")
}

model usuario {
  id                 Int                  @id @default(autoincrement())
  nome               String
  email              String               @unique(map: "Usuario_email_key")
  senha              String
  tipo               UsuarioTipo
  dataCadastro       DateTime             @default(now())
  planoId            Int
  alunoturma         AlunoTurma[]
  parceria           parceria[]
  progressoapostila  ProgressoApostila[]
  progressoavaliacao ProgressoAvaliacao[]
  progressovideo     ProgressoVideo[]
  turma              turma[]
  plano              plano                @relation(fields: [planoId], references: [id], map: "Usuario_planoId_fkey")

  @@index([planoId], map: "Usuario_planoId_fkey")
}

model video {
  id             Int              @id @default(autoincrement())
  moduloId       Int
  titulo         String
  url            String
  duracao        Int
  progressovideo ProgressoVideo[]
  modulo         modulo           @relation(fields: [moduloId], references: [id], map: "Video_moduloId_fkey")

  @@index([moduloId], map: "Video_moduloId_fkey")
}

enum UsuarioTipo {
  ALUNO
  PROFESSOR
  ADMIN
}
